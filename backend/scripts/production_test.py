#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
LFA Legacy GO - Production & Local API Teszt
==========================================
Teszteli a backend-et lok√°lisan √©s production k√∂rnyezetben
"""

import requests
import json
import time
import random
from datetime import datetime

def generate_test_user():
    timestamp = int(time.time())
    random_suffix = ''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=4))
    return {
        'username': f'apitest_{timestamp}_{random_suffix}',
        'email': f'apitest_{timestamp}_{random_suffix}@lfa-test.com',
        'password': 'TestPass123!',
        'first_name': 'API',
        'last_name': 'Tester'
    }

def log_test(test_name, success, details=""):
    """Teszt eredm√©ny logol√°sa"""
    status = "‚úÖ" if success else "‚ùå"
    print(f"{status} {test_name}")
    if details:
        print(f"   üìù {details}")

def test_api_backend(backend_url, environment_name):
    """Backend API teljes tesztel√©se"""
    print("üèà" * 30)
    print(f"üèà LFA LEGACY GO - {environment_name.upper()} API TESZT üèà")
    print("üèà" * 30)
    print(f"üåç Backend URL: {backend_url}")
    print(f"‚è∞ Teszt id≈ë: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("")
    
    success_count = 0
    total_tests = 0
    user_data = generate_test_user()
    token = None
    
    # 1. Health Check
    print("üß™ TESZT 1: Health Check")
    total_tests += 1
    try:
        response = requests.get(f"{backend_url}/health", timeout=15)
        if response.status_code == 200:
            health_data = response.json()
            log_test("Health Check", True, f"Status: {health_data.get('status', 'OK')}")
            success_count += 1
        else:
            log_test("Health Check", False, f"HTTP {response.status_code}")
    except Exception as e:
        log_test("Health Check", False, f"Error: {str(e)}")
    
    # 2. API Root
    print("\nüß™ TESZT 2: API Root Endpoint")
    total_tests += 1
    try:
        response = requests.get(f"{backend_url}/", timeout=15)
        if response.status_code == 200:
            root_data = response.json()
            log_test("API Root", True, f"Version: {root_data.get('version', 'N/A')}")
            log_test("Environment", True, f"Env: {root_data.get('environment', 'Unknown')}")
            success_count += 1
        else:
            log_test("API Root", False, f"HTTP {response.status_code}")
    except Exception as e:
        log_test("API Root", False, f"Error: {str(e)}")
    
    # 3. API Documentation
    print("\nüß™ TESZT 3: API Documentation")
    total_tests += 1
    try:
        response = requests.get(f"{backend_url}/docs", timeout=15)
        if response.status_code == 200:
            log_test("API Docs", True, "Swagger UI el√©rhet≈ë")
            success_count += 1
        else:
            log_test("API Docs", False, f"HTTP {response.status_code}")
    except Exception as e:
        log_test("API Docs", False, f"Error: {str(e)}")
    
    # 4. Credit System
    print("\nüß™ TESZT 4: Credit System")
    total_tests += 1
    try:
        response = requests.get(f"{backend_url}/api/credits/packages", timeout=15)
        if response.status_code == 200:
            packages = response.json()
            log_test("Credit Packages", True, f"{len(packages)} csomag el√©rhet≈ë")
            if packages:
                sample_package = packages[0]
                log_test("Sample Package", True, f"{sample_package.get('name')}: {sample_package.get('price')}‚Ç¨")
            success_count += 1
        else:
            log_test("Credit Packages", False, f"HTTP {response.status_code}")
    except Exception as e:
        log_test("Credit Packages", False, f"Error: {str(e)}")
    
    # 5. User Registration
    print("\nüß™ TESZT 5: User Registration")
    total_tests += 1
    try:
        response = requests.post(
            f"{backend_url}/api/auth/register",
            json=user_data,
            timeout=15
        )
        if response.status_code == 200:
            reg_data = response.json()
            log_test("User Registration", True, f"User ID: {reg_data.get('id')}")
            success_count += 1
            
            # 6. User Login
            print("\nüß™ TESZT 6: User Login")
            total_tests += 1
            try:
                login_data = {
                    'username': user_data['username'],
                    'password': user_data['password']
                }
                login_response = requests.post(
                    f"{backend_url}/api/auth/login",
                    json=login_data,
                    timeout=15
                )
                
                if login_response.status_code == 200:
                    login_result = login_response.json()
                    token = login_result.get('access_token')
                    log_test("User Login", True, f"Token: {token[:20]}...")
                    success_count += 1
                    
                    # 7. Protected Endpoint
                    print("\nüß™ TESZT 7: Protected Endpoint")
                    total_tests += 1
                    try:
                        profile_response = requests.get(
                            f"{backend_url}/api/auth/me",
                            headers={"Authorization": f"Bearer {token}"},
                            timeout=15
                        )
                        
                        if profile_response.status_code == 200:
                            profile_data = profile_response.json()
                            log_test("Profile Access", True, f"Username: {profile_data.get('username')}")
                            log_test("User Credits", True, f"Credits: {profile_data.get('credits', 0)}")
                            success_count += 1
                        else:
                            log_test("Profile Access", False, f"HTTP {profile_response.status_code}")
                    except Exception as e:
                        log_test("Profile Access", False, f"Error: {str(e)}")
                        
                else:
                    log_test("User Login", False, f"HTTP {login_response.status_code}")
            except Exception as e:
                log_test("User Login", False, f"Error: {str(e)}")
                
        else:
            log_test("User Registration", False, f"HTTP {response.status_code}")
            print(f"   üìÑ Response: {response.text[:200]}...")
    except Exception as e:
        log_test("User Registration", False, f"Error: {str(e)}")
    
    # Eredm√©nyek
    print("\n" + "üèÜ" * 50)
    print(f"üèÜ {environment_name.upper()} API TESZT EREDM√âNYEK üèÜ")
    print("üèÜ" * 50)
    
    success_rate = (success_count / total_tests * 100) if total_tests > 0 else 0
    
    print(f"\nüìä STATISZTIK√ÅK:")
    print(f"   √ñsszes teszt: {total_tests}")
    print(f"   Sikeres: {success_count}")
    print(f"   Sikertelen: {total_tests - success_count}")
    print(f"   Sikeress√©gi ar√°ny: {success_rate:.1f}%")
    
    print(f"\nüéØ √âRT√âKEL√âS:")
    if success_rate >= 90:
        print("   üéä T√ñK√âLETES! API 100% m≈±k√∂d≈ëk√©pes!")
        print("   ‚úÖ √ñsszes funkci√≥ m≈±k√∂dik")
        print("   ‚úÖ Authentication rendszer perfect")
        print("   ‚úÖ Credit system operational")
        if environment_name == "LOCAL":
            print("   üöÄ K√âSZEN √ÅLL a Railway deployment-re!")
        else:
            print("   üöÄ PRODUCTION READY!")
    elif success_rate >= 80:
        print("   ‚úÖ KIV√ÅL√ì! API majdnem t√∂k√©letes!")
        print("   üîß Kisebb finomhangol√°s sz√ºks√©ges")
    elif success_rate >= 60:
        print("   ‚ö†Ô∏è J√ì! M≈±k√∂dik, de vannak probl√©m√°k")
        print("   üîß N√©h√°ny funkci√≥ jav√≠t√°st ig√©nyel")
    else:
        print("   ‚ùå PROBL√âM√ÅS! Jelent≈ës hib√°k vannak")
        print("   üîß Backend √∫jraind√≠t√°s vagy konfigur√°ci√≥ sz√ºks√©ges")
    
    print(f"\nüë§ TESZT USER ADATOK:")
    print(f"   Username: {user_data['username']}")
    print(f"   Email: {user_data['email']}")
    print(f"   Password: {user_data['password']}")
    if token:
        print(f"   JWT Token: {token[:30]}...")
    
    print(f"\nüåê API LINKEK:")
    print(f"   Backend API: {backend_url}")
    print(f"   API Docs: {backend_url}/docs")
    print(f"   Health Check: {backend_url}/health")
    
    print("")
    print("=" * 60)
    print(f"üèÅ {environment_name.upper()} API TESZT BEFEJEZVE!")
    print("=" * 60)
    
    return success_rate >= 80

def main():
    print("üöÄ LFA Legacy GO - Comprehensive API Tester")
    print("=" * 50)
    print("Lok√°lis √©s production backend tesztel√©se")
    print("")
    
    # V√°laszt√°s
    print("üéØ TESZT OPCI√ìK:")
    print("1. Lok√°lis backend teszt (localhost:8000)")
    print("2. Production backend teszt (Railway URL)")
    print("3. Mindkett≈ë tesztel√©se")
    print("")
    
    choice = input("V√°lassz opci√≥t (1/2/3): ").strip()
    
    results = []
    
    if choice in ["1", "3"]:
        # Lok√°lis teszt
        local_url = "http://localhost:8000"
        print(f"\nüè† LOK√ÅLIS BACKEND TESZTEL√âSE: {local_url}")
        input("Nyomj ENTER-t a lok√°lis teszt ind√≠t√°s√°hoz...")
        
        try:
            local_result = test_api_backend(local_url, "LOCAL")
            results.append(("LOCAL", local_result))
        except KeyboardInterrupt:
            print("\n‚ö° Lok√°lis teszt megszak√≠tva!")
        except Exception as e:
            print(f"\nüí• Lok√°lis teszt hiba: {e}")
            results.append(("LOCAL", False))
    
    if choice in ["2", "3"]:
        # Production teszt
        print(f"\nüåç PRODUCTION BACKEND TESZTEL√âSE")
        railway_url = input("Add meg a Railway backend URL-t (pl. https://your-app.railway.app): ").strip()
        
        if railway_url:
            input("Nyomj ENTER-t a production teszt ind√≠t√°s√°hoz...")
            
            try:
                prod_result = test_api_backend(railway_url, "PRODUCTION")
                results.append(("PRODUCTION", prod_result))
            except KeyboardInterrupt:
                print("\n‚ö° Production teszt megszak√≠tva!")
            except Exception as e:
                print(f"\nüí• Production teszt hiba: {e}")
                results.append(("PRODUCTION", False))
        else:
            print("‚ö†Ô∏è Nincs Railway URL megadva, production teszt kihagyva.")
    
    # √ñsszes√≠t≈ë
    if results:
        print("\n" + "üéä" * 60)
        print("üéä TELJES TESZT √ñSSZES√çT≈ê üéä")
        print("üéä" * 60)
        
        for env, success in results:
            status = "‚úÖ SIKER" if success else "‚ùå HIBA"
            print(f"   {env}: {status}")
        
        all_success = all(result[1] for result in results)
        
        if all_success:
            print("\nüèÜ MINDEN TESZT SIKERES!")
            print("   ‚úÖ Backend API t√∂k√©letesen m≈±k√∂dik")
            print("   ‚úÖ K√©szen √°ll a production launch-ra")
        else:
            print("\n‚ö†Ô∏è VAN JAV√çTANIVAL√ì")
            print("   üîß N√©h√°ny k√∂rnyezetben probl√©m√°k vannak")
    
    print("\nüöÄ K√ñVETKEZ≈ê L√âP√âSEK:")
    if choice in ["1", "3"] and any(r[0] == "LOCAL" and r[1] for r in results):
        print("   1. ‚úÖ Lok√°lis backend m≈±k√∂dik ‚Üí Railway deployment")
        print("   2. üöÇ Railway CLI: railway login && railway up")
        print("   3. üîÑ Frontend environment variable update")
    
    if choice in ["2", "3"] and any(r[0] == "PRODUCTION" and r[1] for r in results):
        print("   1. ‚úÖ Production backend m≈±k√∂dik ‚Üí Launch ready!")
        print("   2. üåê Netlify frontend tesztel√©s")
        print("   3. üë• User acceptance testing")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ö° Teszt megszak√≠tva!")
    except Exception as e:
        print(f"\n\nüí• V√°ratlan hiba: {e}")