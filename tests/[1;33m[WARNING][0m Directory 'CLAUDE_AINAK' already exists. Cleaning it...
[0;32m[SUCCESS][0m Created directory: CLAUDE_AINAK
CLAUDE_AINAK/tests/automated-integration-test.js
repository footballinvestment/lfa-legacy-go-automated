// === LFA Legacy GO - Automatikus Tesztel√©si Rendszer ===
// F√°jl: test/automated-integration-test.js

import puppeteer from 'puppeteer';
import chalk from 'chalk';

class LFALegacyAutoTester {
  constructor() {
    this.browser = null;
    this.page = null;
    this.testResults = [];
    
    // Konfigur√°ci√≥s be√°ll√≠t√°sok
    this.config = {
      // Frontend URL - Netlify
      frontendUrl: 'https://lfa-legacy-go.netlify.app',
      // Backend URL - Google Cloud Run
      backendUrl: 'https://lfa-legacy-go-backend-376491487980.us-central1.run.app',
      // Teszt felhaszn√°l√≥ adatok
      testUser: {
        username: 'testuser_' + Date.now(),
        email: 'test@example.com',
        password: 'TestPassword123!'
      },
      // Teszt be√°ll√≠t√°sok
      headless: false, // false = l√°that√≥ b√∂ng√©sz≈ë
      slowMo: 500, // lass√≠t√°s emberszem sz√°m√°ra
      timeout: 30000
    };
  }

  // === F≈ê TESZTEL√âSI FOLYAMAT ===
  async runFullIntegrationTest() {
    console.log(chalk.blue('üöÄ LFA Legacy GO - Automatikus Integr√°ci√≥s Teszt Ind√≠t√°sa'));
    console.log(chalk.gray('Frontend URL:'), this.config.frontendUrl);
    console.log(chalk.gray('Backend URL:'), this.config.backendUrl);
    
    try {
      await this.setupBrowser();
      await this.testBackendConnectivity();
      await this.testFrontendLoading();
      await this.testUserRegistration();
      await this.testUserLogin();
      await this.testDashboardAccess();
      await this.testAPIIntegration();
      
      this.printTestResults();
      
    } catch (error) {
      console.error(chalk.red('‚ùå Teszt hiba:'), error.message);
    } finally {
      await this.cleanup();
    }
  }

  // === B√ñNG√âSZ≈ê BE√ÅLL√çT√ÅS ===
  async setupBrowser() {
    console.log(chalk.yellow('üîß B√∂ng√©sz≈ë ind√≠t√°sa...'));
    
    this.browser = await puppeteer.launch({
      headless: this.config.headless,
      slowMo: this.config.slowMo,
      defaultViewport: { width: 1280, height: 720 },
      args: [
        '--no-sandbox',
        '--disable-web-security',
        '--disable-features=VizDisplayCompositor'
      ]
    });
    
    this.page = await this.browser.newPage();
    
    // Console log figyel√©se
    this.page.on('console', msg => {
      if (msg.text().includes('Environment Config')) {
        console.log(chalk.green('‚úÖ Environment Config tal√°lt:'), msg.text());
      }
      if (msg.text().includes('API')) {
        console.log(chalk.blue('üì° API Log:'), msg.text());
      }
    });
    
    // Hib√°k figyel√©se
    this.page.on('pageerror', error => {
      console.log(chalk.red('‚ùå Frontend hiba:'), error.message);
    });
    
    this.addTestResult('Browser Setup', true, 'B√∂ng√©sz≈ë sikeresen elind√≠tva');
  }

  // === BACKEND KAPCSOLAT TESZT ===
  async testBackendConnectivity() {
    console.log(chalk.yellow('üîç Backend kapcsolat tesztel√©se...'));
    
    try {
      // Health check
      const response = await fetch(this.config.backendUrl + '/health');
      const isHealthy = response.ok;
      
      if (isHealthy) {
        const healthData = await response.json();
        console.log(chalk.green('‚úÖ Backend el√©rhet≈ë:'), healthData);
        this.addTestResult('Backend Health', true, `Status: ${response.status}`);
      } else {
        throw new Error(`Backend nem el√©rhet≈ë: ${response.status}`);
      }
      
      // API docs el√©rhet≈ës√©g
      const docsResponse = await fetch(this.config.backendUrl + '/docs');
      const docsOk = docsResponse.ok;
      
      this.addTestResult('API Docs', docsOk, `Docs status: ${docsResponse.status}`);
      
    } catch (error) {
      this.addTestResult('Backend Connectivity', false, error.message);
      throw error;
    }
  }

  // === FRONTEND BET√ñLT√âS TESZT ===
  async testFrontendLoading() {
    console.log(chalk.yellow('üåê Frontend bet√∂lt√©s tesztel√©se...'));
    
    try {
      await this.page.goto(this.config.frontendUrl, { 
        waitUntil: 'networkidle2',
        timeout: this.config.timeout 
      });
      
      // V√°rakoz√°s az oldal teljes bet√∂lt√©s√©re
      await this.page.waitForSelector('form', { timeout: 10000 });
      
      // Environment configuration ellen≈ërz√©se
      const apiUrlCheck = await this.page.evaluate(() => {
        // Ellen≈ërizni hogy a build tartalmazza-e a helyes API URL-t
        const scripts = Array.from(document.scripts);
        return scripts.some(script => 
          script.innerHTML.includes('lfa-legacy-go-backend') ||
          script.src.includes('lfa-legacy-go-backend')
        );
      });
      
      // Oldal title ellen≈ërz√©se
      const title = await this.page.title();
      const hasCorrectTitle = title.includes('LFA') || title.includes('Legacy');
      
      this.addTestResult('Frontend Loading', true, `Title: ${title}`);
      this.addTestResult('API URL in Build', apiUrlCheck, apiUrlCheck ? 'API URL be√©p√≠tve' : 'API URL nincs be√©p√≠tve');
      
    } catch (error) {
      this.addTestResult('Frontend Loading', false, error.message);
      throw error;
    }
  }

  // === FELHASZN√ÅL√ì REGISZTR√ÅCI√ì TESZT ===
  async testUserRegistration() {
    console.log(chalk.yellow('üë§ Felhaszn√°l√≥ regisztr√°ci√≥ tesztel√©se...'));
    
    try {
      // V√°lt√°s Sign Up-ra
      const signUpButton = await this.page.$('button:contains("SIGN UP"), .sign-up, [data-testid="sign-up"]');
      if (signUpButton) {
        await signUpButton.click();
        await this.page.waitForTimeout(1000);
      }
      
      // Regisztr√°ci√≥s form kit√∂lt√©se
      await this.page.waitForSelector('input[name="username"], input[placeholder*="username" i]', { timeout: 5000 });
      
      // Username
      const usernameField = await this.page.$('input[name="username"], input[placeholder*="username" i]');
      if (usernameField) {
        await usernameField.type(this.config.testUser.username);
      }
      
      // Email (ha van)
      const emailField = await this.page.$('input[name="email"], input[type="email"]');
      if (emailField) {
        await emailField.type(this.config.testUser.email);
      }
      
      // Password
      const passwordField = await this.page.$('input[name="password"], input[type="password"]');
      if (passwordField) {
        await passwordField.type(this.config.testUser.password);
      }
      
      // Submit gomb
      const submitButton = await this.page.$('button[type="submit"], button:contains("Sign Up"), .register-btn');
      if (submitButton) {
        await submitButton.click();
        
        // V√°rakoz√°s a v√°laszra
        await this.page.waitForTimeout(3000);
        
        // Eredm√©ny ellen≈ërz√©se
        const currentUrl = this.page.url();
        const registrationSuccess = currentUrl.includes('/dashboard') || currentUrl.includes('/login');
        
        this.addTestResult('User Registration', registrationSuccess, `URL: ${currentUrl}`);
      }
      
    } catch (error) {
      this.addTestResult('User Registration', false, `Regisztr√°ci√≥ hiba: ${error.message}`);
      console.log(chalk.yellow('‚ö†Ô∏è Regisztr√°ci√≥ hiba, folytat√°s bejelentkez√©ssel...'));
    }
  }

  // === FELHASZN√ÅL√ì BEJELENTKEZ√âS TESZT ===
  async testUserLogin() {
    console.log(chalk.yellow('üîê Felhaszn√°l√≥ bejelentkez√©s tesztel√©se...'));
    
    try {
      // Navig√°ci√≥ a login oldalra
      await this.page.goto(this.config.frontendUrl, { waitUntil: 'networkidle2' });
      
      // Sign In tab kiv√°laszt√°sa
      const signInButton = await this.page.$('button:contains("SIGN IN"), .sign-in, [data-testid="sign-in"]');
      if (signInButton) {
        await signInButton.click();
        await this.page.waitForTimeout(1000);
      }
      
      // Login form kit√∂lt√©se
      await this.page.waitForSelector('input[name="username"], input[placeholder*="username" i]', { timeout: 5000 });
      
      const usernameField = await this.page.$('input[name="username"], input[placeholder*="username" i]');
      if (usernameField) {
        await usernameField.clear();
        await usernameField.type(this.config.testUser.username);
      }
      
      const passwordField = await this.page.$('input[name="password"], input[type="password"]');
      if (passwordField) {
        await passwordField.clear();
        await passwordField.type(this.config.testUser.password);
      }
      
      // Login gomb
      const loginButton = await this.page.$('button[type="submit"], button:contains("Sign In"), .login-btn');
      if (loginButton) {
        await loginButton.click();
        
        // V√°rakoz√°s a v√°laszra
        await this.page.waitForTimeout(5000);
        
        const currentUrl = this.page.url();
        const loginSuccess = currentUrl.includes('/dashboard') || !currentUrl.includes('/login');
        
        this.addTestResult('User Login', loginSuccess, `URL: ${currentUrl}`);
      }
      
    } catch (error) {
      this.addTestResult('User Login', false, error.message);
    }
  }

  // === DASHBOARD HOZZ√ÅF√âR√âS TESZT ===
  async testDashboardAccess() {
    console.log(chalk.yellow('üìä Dashboard hozz√°f√©r√©s tesztel√©se...'));
    
    try {
      // V√°rakoz√°s a dashboard bet√∂lt√©s√©re
      await this.page.waitForTimeout(3000);
      
      // Dashboard elemek ellen≈ërz√©se
      const hasDashboardElements = await this.page.evaluate(() => {
        const indicators = [
          document.querySelector('.dashboard'),
          document.querySelector('[class*="tournament"]'),
          document.querySelector('[class*="profile"]'),
          document.querySelector('nav'),
          document.querySelector('.user-info')
        ];
        return indicators.some(el => el !== null);
      });
      
      const currentUrl = this.page.url();
      const isOnDashboard = currentUrl.includes('/dashboard') || hasDashboardElements;
      
      this.addTestResult('Dashboard Access', isOnDashboard, `Dashboard el√©rhet≈ë: ${currentUrl}`);
      
    } catch (error) {
      this.addTestResult('Dashboard Access', false, error.message);
    }
  }

  // === API INTEGR√ÅCI√ì TESZT ===
  async testAPIIntegration() {
    console.log(chalk.yellow('üîó API integr√°ci√≥ tesztel√©se...'));
    
    try {
      // API h√≠v√°sok figyel√©se
      const apiCalls = [];
      
      this.page.on('response', response => {
        if (response.url().includes(this.config.backendUrl)) {
          apiCalls.push({
            url: response.url(),
            status: response.status(),
            method: response.request().method()
          });
        }
      });
      
      // Oldal friss√≠t√©se API h√≠v√°sok kiv√°lt√°s√°hoz
      await this.page.reload({ waitUntil: 'networkidle2' });
      
      // V√°rakoz√°s API h√≠v√°sokra
      await this.page.waitForTimeout(5000);
      
      const hasSuccessfulApiCalls = apiCalls.some(call => call.status >= 200 && call.status < 400);
      const apiCallsCount = apiCalls.length;
      
      this.addTestResult('API Integration', hasSuccessfulApiCalls, `${apiCallsCount} API h√≠v√°s, ${apiCalls.filter(c => c.status < 400).length} sikeres`);
      
      // API h√≠v√°sok r√©szletei
      console.log(chalk.blue('üì° API h√≠v√°sok:'));
      apiCalls.forEach(call => {
        const statusColor = call.status < 400 ? chalk.green : chalk.red;
        console.log(statusColor(`  ${call.method} ${call.url} - ${call.status}`));
      });
      
    } catch (error) {
      this.addTestResult('API Integration', false, error.message);
    }
  }

  // === EREDM√âNYEK HOZZ√ÅAD√ÅSA ===
  addTestResult(testName, success, details) {
    this.testResults.push({
      test: testName,
      success,
      details,
      timestamp: new Date().toISOString()
    });
  }

  // === TESZTEL√âSI EREDM√âNYEK KI√çR√ÅSA ===
  printTestResults() {
    console.log('\n' + chalk.blue('üèÜ TESZTEL√âSI EREDM√âNYEK √ñSSZEFOGLAL√ìJA'));
    console.log('='.repeat(60));
    
    const successful = this.testResults.filter(r => r.success).length;
    const total = this.testResults.length;
    
    this.testResults.forEach(result => {
      const icon = result.success ? '‚úÖ' : '‚ùå';
      const color = result.success ? chalk.green : chalk.red;
      console.log(color(`${icon} ${result.test}: ${result.details}`));
    });
    
    console.log('\n' + chalk.blue(`üìä √ñSSZESEN: ${successful}/${total} teszt sikeres`));
    
    if (successful === total) {
      console.log(chalk.green('üéâ MINDEN TESZT SIKERES! A frontend-backend integr√°ci√≥ m≈±k√∂dik!'));
    } else {
      console.log(chalk.yellow('‚ö†Ô∏è Vannak hib√°k, ellen≈ërizd a r√©szleteket fent.'));
    }
  }

  // === TAKAR√çT√ÅS ===
  async cleanup() {
    if (this.browser) {
      await this.browser.close();
      console.log(chalk.gray('üßπ B√∂ng√©sz≈ë bez√°rva'));
    }
  }
}

// === FUTTAT√ì SCRIPT ===
async function runAutomatedTest() {
  const tester = new LFALegacyAutoTester();
  await tester.runFullIntegrationTest();
}

// K√∂zvetlen futtat√°s eset√©n
if (import.meta.url === `file://${process.argv[1]}`) {
  runAutomatedTest().catch(console.error);
}

export { LFALegacyAutoTester, runAutomatedTest };