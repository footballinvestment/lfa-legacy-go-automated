# =============================================
# LFA LEGACY GO - DOCKER COMPOSE
# Local development environment
# =============================================

version: '3.8'

services:
  # =============================================
  # DATABASE SERVICE
  # =============================================
  postgres:
    image: postgres:15-alpine
    container_name: lfa-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: lfa_legacy_go
      POSTGRES_USER: lfa_user
      POSTGRES_PASSWORD: lfa_password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - lfa-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U lfa_user -d lfa_legacy_go"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =============================================
  # BACKEND API SERVICE
  # =============================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        BUILD_DATE: ${BUILD_DATE:-2024-01-01}
        VERSION: ${VERSION:-dev}
    container_name: lfa-backend
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      # Database
      DATABASE_URL: postgresql://lfa_user:lfa_password@postgres:5432/lfa_legacy_go
      
      # Security
      JWT_SECRET_KEY: dev-secret-key-change-in-production
      
      # Application
      ENVIRONMENT: development
      DEBUG: true
      CORS_ORIGINS: http://localhost:3000,http://127.0.0.1:3000
      
      # Logging
      LOG_LEVEL: INFO
    volumes:
      - ./backend:/app
      - backend_logs:/app/logs
    networks:
      - lfa-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # =============================================
  # FRONTEND SERVICE (Development)
  # =============================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
      args:
        REACT_APP_API_URL: http://localhost:8080
    container_name: lfa-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      REACT_APP_API_URL: http://localhost:8080
      NODE_ENV: development
      GENERATE_SOURCEMAP: false
      NODE_OPTIONS: --max-old-space-size=4096
    volumes:
      - ./frontend/src:/app/src:ro
      - ./frontend/public:/app/public:ro
      - frontend_node_modules:/app/node_modules
    networks:
      - lfa-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # =============================================
  # REDIS (Optional - for caching)
  # =============================================
  redis:
    image: redis:7-alpine
    container_name: lfa-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - lfa-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # =============================================
  # AUTOMATION TESTING SERVICE
  # =============================================
  automation:
    image: mcr.microsoft.com/playwright:v1.41.0-focal
    container_name: lfa-automation
    working_dir: /tests
    environment:
      FRONTEND_URL: http://frontend:3000
      BACKEND_URL: http://backend:8080
      TEST_USERNAME: automation_user
      TEST_PASSWORD: automation123
      TEST_EMAIL: automation@lfatest.com
    volumes:
      - ./tests:/tests:ro
      - ./test-results:/tests/test-results
      - ./playwright.config.js:/tests/playwright.config.js:ro
      - ./package.json:/tests/package.json:ro
    networks:
      - lfa-network
    depends_on:
      - frontend
      - backend
    profiles:
      - testing
    command: >
      sh -c "
        npm install &&
        npx playwright test tests/automation/lfa-visual-automation.spec.js --reporter=html
      "

# =============================================
# NETWORKS
# =============================================
networks:
  lfa-network:
    driver: bridge
    name: lfa-legacy-go-network

# =============================================
# VOLUMES
# =============================================
volumes:
  postgres_data:
    name: lfa-postgres-data
  redis_data:
    name: lfa-redis-data
  backend_logs:
    name: lfa-backend-logs
  frontend_node_modules:
    name: lfa-frontend-node-modules

# =============================================
# USAGE INSTRUCTIONS
# =============================================
# 
# Start all services:
# docker-compose up -d
#
# Start specific services:
# docker-compose up postgres backend
#
# Run automation tests:
# docker-compose --profile testing up automation
#
# View logs:
# docker-compose logs -f backend
# docker-compose logs -f frontend
#
# Stop all services:
# docker-compose down
#
# Stop and remove volumes:
# docker-compose down -v
#
# Rebuild services:
# docker-compose up --build
#
# =============================================